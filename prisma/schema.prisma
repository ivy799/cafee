// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int      @id @default(autoincrement())       
  clerkUserId    String   @unique                    
  email          String   @unique                    
  name           String?                             
  imageUrl       String?                             
  role           String   @default("user")           
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  cart           Cart?
  orders         Order[]
  reviews        Review[]

  @@map("users")
}

model Menu {
  id          Int    @id @default(autoincrement())
  name        String @unique
  image       String
  description String?
  category    String
  stock       Int    @default(0)
  price       Int    @default(0)

  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("menu")
}

model Cart {
  id     Int @id @default(autoincrement())
  userId Int @unique

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]

  @@map("cart")
}

model CartItem {
  id       Int @id @default(autoincrement())
  cartId   Int
  menuId   Int
  quantity Int

  // Relations
  cart Cart @relation(fields: [cartId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])

  @@unique([cartId, menuId])
  @@map("cartItem")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  total     Int      @default(0)
  status    String   @default("pending")
  createdAt DateTime @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  @@map("order")
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int @default(0)
  priceEach Int @default(0)

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  menu  Menu  @relation(fields: [menuId], references: [id])

  @@map("orderItems")
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  transactionId   String   @unique
  paymentType     String
  grossAmount     Int
  statusCode      String
  transactionTime DateTime @default(now())
  fraudStatus     String?
  signatureKey    String?

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id     Int    @id @default(autoincrement())
  userId Int
  menuId Int
  review String
  rating Int

  // Relations
  user User @relation(fields: [userId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])

  @@unique([userId, menuId])
  @@map("reviews")
}



